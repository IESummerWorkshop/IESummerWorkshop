// Allocate 4KB of stack
let stack = new Stack(0x7f000000, 4*1024);
stack.allocate();
unicorn.reg_write_i64(uc.X86_REG_RSP, 0x7f000000-0x60);
unicorn.reg_write_i64(uc.X86_REG_RBP, 0x7f000000-0x60);

let functions = [];

let main_function = new Function(0x400000, "main", `
push rbp;
mov rbp, rsp;
call 0x1000;
mov rsp, rbp;
pop rbp;
`);
functions.push(main_function);

let vuln_function = new Function(0x401000, "vuln", `
enter 0x20, 0;
lea rax, [rbp - 0x20];
call 0x1000;
leave;
ret;
`);
functions.push(vuln_function);

let gets = new Function(0x402000, "gets@plt", `
nop;
`);
functions.push(gets);

unicorn.mem_map(0x410000, 4*1024, uc.PROT_ALL);
let pop_rax = new Function(0x410000, "pop_rax_gadget", `pop rax; ret;`, false);
functions.push(pop_rax);
let pop_rdi = new Function(pop_rax.end, "pop_rdi_gadget", `pop rdi; ret;`, false);
functions.push(pop_rdi);
let pop_rsi_r15 = new Function(pop_rdi.end, "pop_rsi_r15_gadget", `pop rsi; pop r15; ret;`, false);
functions.push(pop_rsi_r15);
let pop_rdx = new Function(pop_rsi_r15.end, "pop_rdx_gadget", `pop rdx; ret;`, false);
functions.push(pop_rdx);
let syscall_gadget = new Function(pop_rdx.end+1, "syscall_gadget", `syscall;`, false);
functions.push(syscall_gadget);

functions.forEach(func => func.render());

const input_button = document.getElementById("input-send");
input_button.disabled = true;
const input_button_submit_hook = ()=>{
    unicorn.reg_write(uc.X86_REG_EIP, [0x0d, 0x10, 0x40, 0x00]);
    const eax = unicorn.reg_read_i32(uc.X86_REG_EAX);
    const value = get_input_value();
    unicorn.mem_write(eax, value)
    unicorn.hook_del(gets_hook);
    this.removeEventListener("click", input_button_submit_hook);
    input_button.style.display = "none";
    ropRunCode();
}
function alert_input(){
    alert("Please change the value of Input and press \"Send to stdin\".")
}
const gets_hook = unicorn.hook_add(uc.HOOK_CODE, (handle, addr_lo, addr_hi, size, user_data)=>{
        unicorn.emu_stop();
        input_button.style.display = "block";
        input_button.addEventListener("click", input_button_submit_hook);
        alert_input();
    },
undefined, 0x401008, 0x401008);

const syscall_hook = unicorn.hook_add(uc.HOOK_INSN, (handle, user_data)=>{
        console.log("hooked syscall");
        unicorn.emu_stop();
        // want: rax = 59, rdi -> "/bin/sh", rsi -> 0, rdx -> 0
        const rax = unicorn.reg_read_i64(uc.X86_REG_RAX);
        let rdi = unicorn.reg_read_i64(uc.X86_REG_RDI).num();
        const rsi = unicorn.reg_read_i64(uc.X86_REG_RSI);
        const rdx = unicorn.reg_read_i64(uc.X86_REG_RDX);
        if(rax != 59){
            alert("rax != 59");
            return;
        }
        // Read rdi as a null-terminated string
        let rdi_str = "";
        while(true){
            const byte = unicorn.mem_read(rdi, 1);
            if(byte == 0) break;
            rdi_str += String.fromCharCode(byte);
            rdi++;
        }
        if(rdi_str != "/bin/sh"){
            alert("rdi != /bin/sh");
            return;
        }
        if(rsi != 0){
            alert("rsi != 0");
            return;
        }
        if(rdx != 0){
            alert("rdx != 0");
            return;
        }
        alert("You passed the level!");
}, undefined, syscall_gadget.start, syscall_gadget.end, uc.X86_INS_SYSCALL);


const registers_table = new RegisterTable();
registers_table.populate();

const stack_table = new StackTable(stack.stack_top, 40);
stack_table.populate();

function ropRunCode(){
    try{
        runCode();
    }catch(e){
        // Append to error-log
        const error_log = document.getElementById("error-log");
        const error = document.createElement("p");
        error.innerHTML = e;
        error_log.appendChild(error);
    }
}

NUM_BITS = 64;
render();