
// const render_tooltips = ()=>{
//     // $$$("[canonical-value]").tooltip()
   
// }
function hex_to_ascii(hex){
    let str = "";
    for(let i = 0; i < hex.length; i+=2){
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    }
    return str;
}


function set_tooltips(){
    $$$("[data-tooltip]").tooltip({
        content: function(){
            const elem = $$$(this);
            const bytes = elem.attr("data-tooltip");
            return `bytes: <span style="font-family: Source Code Pro;">${bytes}</span>`
        },
        items: "[data-tooltip]"
    });
    $$$("[canonical-value]").tooltip({
        content: function(){
            const elem = $$$(this);
            const canonical_value = elem.attr("canonical-value");
            const padded_value = canonical_value.padStart(NUM_BITS>>2, "0");
            return `hex (big-endian): <span style="font-family: Source Code Pro;">${canonical_value}</span><br>
            hex (little-endian): <span style="font-family: Source Code Pro;">${padded_value.match(/.{2}/g).reverse().join(" ")}</span><br>
            decimal: <span style="font-family: Source Code Pro;">${parseInt(canonical_value, 16)}</span><br>
            string: <span style="font-family: Source Code Pro;">${hex_to_ascii(canonical_value)}</span>`
        },
        items: "[canonical-value]"
    });
}

let _render = render;
render = ()=>{
    _render();
    set_tooltips();
}
