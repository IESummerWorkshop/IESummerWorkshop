const input_field = document.getElementById("input-field"); //table

function hex_input(event){
    if(!((event.charCode >= 48 && event.charCode <= 57) || (event.charCode >= 97 && event.charCode <= 102))){
        event.preventDefault();
        return false;
    }
}

function hex_bad(event){
    if(event.target.innerHTML.length <= 2){
        event.target.style.backgroundColor = "#f2f4f6";
        event.target.style.color = "";
    }else{
        event.target.style.backgroundColor = "red";
        event.target.style.color = "white";
    }
}

function check_row_all_zero(row){
    const td_cells = row.querySelectorAll("td[row][col]");
    for(let cell of td_cells){
        const span = cell.querySelector("span");
        if(span.innerHTML != "00") return false;
    }
    return true;
}

function add_or_remove_row(){
    // check if the last row is all zeros.
    const rows = input_field.querySelectorAll("tr[row]");
    const last_row = rows[rows.length-1];
    if(check_row_all_zero(last_row)){
        // if the second last row is also all zeros, remove the last row
        let cur = rows.length-2;
        while(check_row_all_zero(rows[cur]) && cur+2 > min_row){
            input_field.removeChild(rows[cur+1]);
            current_row--;
            cur--;
        }
    }else{
        // add a new row
        add_row();
    }
}

function add_row(){
    let row = document.createElement("tr");
    row.setAttribute("row", current_row);
    let cell = document.createElement("td");
    //The first element of each row
    cell.innerHTML = current_row.toString(16).padStart(2, "0");
    cell.className ="fw-bold";
    row.appendChild(cell);
    for(let i = 0; i < 16; i++){
        let cell = document.createElement("td");
        cell.setAttribute("row", current_row);
        cell.setAttribute("col", i);
        const editible = document.createElement("span");
        editible.innerHTML = "00";
        editible.setAttribute("contenteditable", "true");
        editible.setAttribute("style", "background: #f2f4f6;");
        editible.setAttribute("onkeypress", "hex_input(event)");
        editible.setAttribute("onblur", "hex_bad(event);add_or_remove_row();");
        cell.appendChild(editible);
        row.appendChild(cell);
    }
    input_field.appendChild(row);
    current_row++;
}

// TODO: dynamically generate the hex editor row by row
// when the current row is filled, add a new row
let current_row = 0;
const min_row = 3;
function initialize_hex_editor(){
    current_row = 0;
    //generate table head + body;
    //let table_header = document.createElement("thead");
    // generate the first row
    let row = document.createElement("tr");
    // empty cell first
    let cell = document.createElement("td");
    row.appendChild(cell);
    for(let i = 0; i < 16; i++){
        let cell = document.createElement("td");
        let span = document.createElement("span");
        span.innerHTML = i.toString(16).padStart(2, "0");
        span.className = "fw-bold";
        span.setAttribute("style", "background: #f2f4f6;");
        cell.appendChild(span)
        row.appendChild(cell);
    }
    //table_header.appendChild(row);
    input_field.appendChild(row);
    for(let i=0; i<min_row; i++){
        add_row();
    }
}
(()=>{
    initialize_hex_editor();
    // set default value
    const cells = input_field.querySelectorAll("td[row='0']");
    cells.forEach(cell => {
        const span = cell.querySelector("span");
        if(parseInt(cell.getAttribute("col")) < 14)
            span.innerHTML = "41";
        else if(cell.getAttribute("col") == "14")
            span.innerHTML = "0a";
    });
})();

function get_input_value(){
    let input = [];
    const rows = input_field.querySelectorAll("tr");
    rows.forEach(row => {
        const cells = row.querySelectorAll("td");
        cells.forEach(cell => {
            if(cell.getAttribute("col") != null){
                const span = cell.querySelector("span");
                input.push(parseInt(span.innerHTML, 16));
            }
        });
    });
    // look for the first 0a and truncate everything after
    let cut = false;
    for(let i=0; i<input.length; i++){
        if(input[i] == 0x0a){
            input = input.slice(0, i);
            cut = true
            break;
        }
    }
    if(!cut){
        // remove trailing 00s (but add one back)
        while(input[input.length-1] == 0x00) input.pop();
        input.push(0x00);
    }

    return input;
}

function setHexToTextArea(){
    const text_area = document.getElementById("input-textarea");
    let val = text_area.value;
    val = val.replace(/0x/g, "").replace(/ /g, "").replace(/,/g, "").replace(/\n/g, "").replace(/\r/g, "");
    // remaining are hex?
    if(!val.match(/^[0-9a-fA-F]+$/)){
        alert("Please enter a valid hex string.");
        return;
    }
    let hex_arr = [];
    for(let i=0; i<val.length; i+=2){
        hex_arr.push(val.substr(i, 2));
    }
    // pad with 0s
    for(let i=hex_arr.length%16; i<16; i++) hex_arr.push("00");
    const num_rows = hex_arr.length >> 4;
    input_field.innerHTML = "";
    initialize_hex_editor();
    for(let i=0; i<num_rows; i++){
        add_row();
        const cells = input_field.querySelectorAll("td[row='"+i.toString()+"']");
        for(let j=0; j<16; j++){
            const span = cells[j].querySelector("span");
            span.innerHTML = hex_arr[i*16+j];
        }
    }
    add_or_remove_row();
    
}


/*
// DOM utility functions:
const els = (sel, par) => (par || document).querySelectorAll(sel);
// Task: multiple inputs "field"
els(".pin").forEach((elGroup) => {

  const elsInput = [...elGroup.children];
  const len = elsInput.length;
  
  const handlePaste = (ev) => {
    const clip = ev.clipboardData.getData('text');     // Get clipboard data
    const pin = clip.replace();               // Sanitize string
    const ch = [...pin];                               // Create array of chars
    elsInput.forEach((el, i) => el.value = ch[i]??""); // Populate inputs
    elsInput[pin.length - 1].focus();                  // Focus input
  };

  const handleInput = (ev) => {
    const elInp = ev.currentTarget;
    const i = elsInput.indexOf(elInp);
    if (elInp.value !== null && elInp.value.length > 1) elsInput[i + 1].focus();  // focus next
  };
  
  const handleKeyDn = (ev) => {
    const elInp = ev.currentTarget
    const i = elsInput.indexOf(elInp);
    if (!elInp.value && ev.key === "Backspace" && i) elsInput[i - 1].focus(); // Focus previous
  };
  
  
  // Add the same events to every input in group:
  elsInput.forEach(elInp => {
    elInp.addEventListener("paste", handlePaste);   // Handle pasting
    elInp.addEventListener("input", handleInput);   // Handle typing
    elInp.addEventListener("keydown", handleKeyDn); // Handle deleting
  });
  
});
*/