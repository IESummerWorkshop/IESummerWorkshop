// Allocate 4KB of stack
let stack = new Stack(0x7f000000, 4*1024);
stack.allocate();

let functions = [];

let main_function = new Code(0x400000, "main", `
push ebp;
mov ebp, esp;
call 0x1000;
mov esp, ebp;
pop ebp;
`);
functions.push(main_function);

let vuln_function = new Code(0x401000, "vuln", `
push ebp;
mov ebp, esp;
sub esp, 0x10;
lea eax, [ebp - 0x10];
push eax;
call 0x2000;
mov esp, ebp;
pop ebp;
ret;
`);
functions.push(vuln_function);

let win = new Code(0x402000, "win", `
nop;`);
functions.push(win);

let gets = new Code(0x403000, "gets", `
nop;
`);
functions.push(gets);

functions.forEach(func => func.render());

const input_button = document.getElementById("input-send");
input_button.disabled = true;
const input_button_submit_hook = ()=>{
    unicorn.reg_write(uc.X86_REG_EIP, [0x0f, 0x10, 0x40, 0x00]);
    const eax = unicorn.reg_read_i32(uc.X86_REG_EAX);
    const value = get_input_value();
    unicorn.mem_write(eax, value)
    // unicorn.hook_del(gets_hook);
    this.removeEventListener("click", input_button_submit_hook);
    //input_button.style.display = "none";    
    input_button.disabled = true;
    bofRunCode();
}

function alert_input(){
    alert("Please change the value of Input and press \"Send to stdin\".")
}

const gets_hook = unicorn.hook_add(uc.HOOK_CODE, (handle, addr_lo, addr_hi, size, user_data)=>{
        unicorn.emu_stop();
        //input_button.style.display = "block";
        input_button.disabled = false;
        input_button.addEventListener("click", input_button_submit_hook);
        alert_input();
    },
undefined, 0x40100a, 0x40100a);

const win_hook = unicorn.hook_add(uc.HOOK_CODE, (handle, addr_lo, addr_hi, size, user_data)=>{
        alert("You passed the level!");
        unicorn.emu_stop();
}, undefined, win.start, win.end);

const main_end_hook = unicorn.hook_add(uc.HOOK_CODE, (handle, addr_lo, addr_hi, size, user_data)=>{
    console.log("bye")
    alert("main() is finished.");
    unicorn.emu_stop();
}, undefined, main_function.end, main_function.end);

const registers_table = new RegisterTable();
registers_table.populate();

const stack_table = new StackTable(stack.stack_top, 13);
stack_table.populate();

function bofRunCode(){
    try{
        runCode();
    }catch(e){
        // Append to error-log
        const error_log = document.getElementById("error-log");
        const error = document.createElement("p");
        error.innerHTML = e;
        error_log.appendChild(error);
    }
}

NUM_BITS = 32;
render();